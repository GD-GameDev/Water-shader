shader_type spatial;
render_mode specular_schlick_ggx, shadows_disabled;

uniform sampler2D tex_frg_2 : hint_normal;

//IN THE TEXTURE FRAGMENT SELECT YOUR WATER NORMAL TEXTURE IN THE SHADER PARAM ===>


void vertex() {
// Output:0

}

void fragment() {
// Color:6
	vec3 n_out6p0 = vec3(0.257925, 0.521710, 1.000000);
	float n_out6p1 = 1.000000;

// Fresnel:12
	float n_in12p3 = 4.00000;
	float n_out12p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in12p3);

// ScalarOp:3
	float n_in3p0 = 0.40000;
	float n_out3p0 = n_in3p0 + n_out12p0;

// ScalarOp:5
	float n_in5p0 = 1.00000;
	float n_in5p1 = 0.00000;
	float n_out5p0 = n_in5p0 + n_in5p1;

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// Input:10
	float n_out10p0 = TIME;

// ScalarOp:11
	float n_in11p1 = 10.00000;
	float n_out11p0 = n_out10p0 / n_in11p1;

// VectorOp:9
	vec3 n_out9p0 = n_out8p0 + vec3(n_out11p0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out9p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ColorFunc:13
	vec3 n_out13p0;
	{
		vec3 c = n_out2p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out13p0 = vec3(max3, max3, max3);
	}

// VectorOp:15
	vec3 n_in15p1 = vec3(0.80000, 0.80000, 0.80000);
	vec3 n_out15p0 = n_out13p0 * n_in15p1;

// VectorFunc:14
	vec3 n_out14p0 = round(n_out15p0);

// ScalarOp:7
	float n_in7p1 = 10.00000;
	float n_out7p0 = dot(n_out13p0, vec3(0.333333, 0.333333, 0.333333)) * n_in7p1;

// VectorOp:4
	vec3 n_in4p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out4p0 = n_out2p0 * n_in4p1;

// Output:0
	ALBEDO = n_out6p0;
	ALPHA = n_out3p0;
	ROUGHNESS = n_out5p0;
	EMISSION = n_out14p0;
	AO = n_out7p0;
	NORMALMAP = n_out4p0;
	NORMALMAP_DEPTH = n_out7p0;

}

void light() {
// Output:0

}
